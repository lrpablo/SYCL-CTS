/*******************************************************************************
//
//  SYCL 2020 Conformance Test Suite
//
//  Copyright (c) 2022 The Khronos Group Inc.
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//
*******************************************************************************/

// clang-format off
#cmakedefine CTS_HEADER    @CTS_HEADER@
#cmakedefine CTS_NAMESPACE @CTS_NAMESPACE@
// clang-format on

#include "../common/common.h"

#include CTS_HEADER

#include <iostream>

// Multiple translation units are instantiated from this .in file and linked together, so we must
// ensure that kernel names are namespaced to disambiguate their definitions
namespace kernels CTS_NAMESPACE {
  struct kernel_1;
  struct kernel_2;
  struct kernel_3;
}
using namespace kernels CTS_NAMESPACE;

/** Example program, adapted to use the CTS queue. */
static int test_namespace() {
  // Size of the matrices
  constexpr size_t N = 2000;
  constexpr size_t M = 3000;

  // Create a queue to work on
  CTS_NAMESPACE::queue myQueue = sycl_cts::util::get_cts_object::queue();

  // Create some 2D buffers of float for our matrices
  CTS_NAMESPACE::buffer<float, 2> a{CTS_NAMESPACE::range<2>{N, M}};
  CTS_NAMESPACE::buffer<float, 2> b{CTS_NAMESPACE::range<2>{N, M}};
  CTS_NAMESPACE::buffer<float, 2> c{CTS_NAMESPACE::range<2>{N, M}};

  // Launch an asynchronous kernel to initialize a
  myQueue.submit([&](CTS_NAMESPACE::handler& cgh) {
    // The kernel writes a, so get a write accessor on it
    CTS_NAMESPACE::accessor A{a, cgh, CTS_NAMESPACE::write_only};

    // Enqueue a parallel kernel iterating on a N*M 2D iteration space
    cgh.parallel_for<kernel_1>(CTS_NAMESPACE::range<2>{N, M},
                               [=](CTS_NAMESPACE::id<2> index) {
                                 A[index] = index[0] * 2 + index[1];
                               });
  });

  // Launch an asynchronous kernel to initialize b
  myQueue.submit([&](CTS_NAMESPACE::handler& cgh) {
    // The kernel writes b, so get a write accessor on it
    CTS_NAMESPACE::accessor B{b, cgh, CTS_NAMESPACE::write_only};

    // From the access pattern above, the SYCL runtime detects that this
    // command_group is independent from the first one and can be
    // scheduled independently

    // Enqueue a parallel kernel iterating on a N*M 2D iteration space
    cgh.parallel_for<kernel_2>(CTS_NAMESPACE::range<2>{N, M},
                               [=](CTS_NAMESPACE::id<2> index) {
                                 B[index] = index[0] * 2014 + index[1] * 42;
                               });
  });

  // Launch an asynchronous kernel to compute matrix addition c = a + b
  myQueue.submit([&](CTS_NAMESPACE::handler& cgh) {
    // In the kernel a and b are read, but c is written
    CTS_NAMESPACE::accessor A{a, cgh, CTS_NAMESPACE::read_only};
    CTS_NAMESPACE::accessor B{b, cgh, CTS_NAMESPACE::read_only};
    CTS_NAMESPACE::accessor C{c, cgh, CTS_NAMESPACE::write_only};

    // From these accessors, the SYCL runtime will ensure that when
    // this kernel is run, the kernels computing a and b have completed

    // Enqueue a parallel kernel iterating on a N*M 2D iteration space
    cgh.parallel_for<kernel_3>(
        CTS_NAMESPACE::range<2>{N, M},
        [=](CTS_NAMESPACE::id<2> index) { C[index] = A[index] + B[index]; });
  });

  // Ask for an accessor to read c from application scope.  The SYCL runtime
  // waits for c to be ready before returning from the constructor
  CTS_NAMESPACE::host_accessor C{c, CTS_NAMESPACE::read_only};
  for (size_t i = 0; i < N; i++) {
    for (size_t j = 0; j < M; j++) {
      // Compare the result to the analytic value
      if (C[i][j] != i * (2 + 2014) + j * (1 + 42)) {
        return 1;
      }
    }
  }

  return 0;
}

TEST_CASE("namespace " TOSTRING(CTS_NAMESPACE), "[namespace]") {
    CHECK((test_namespace() == 0));
}
